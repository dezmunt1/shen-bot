import { CommonActions } from '../../actions/common';
import { getUserPermissions, toggleUserPermission } from '../../DB/mongo/user';
import { BotContext } from '../../contracts';
import {
  PostmeContent,
  PostmePermissions,
  postmeContents,
  PostmeActions,
} from './postme.types';
import { Composer } from 'telegraf';
import { PostmeScene } from './postme.scene';
import {
  addChatAsResource,
  deleteSource,
  getAvailableChats,
  getContent,
  setResourceToListening,
} from '../../DB/mongo/postme';
import { optionsKeyboard } from './postme.common';
import { pagination, resourceList } from '../../utils/telegram.utils';

export const postmeActions = new Composer<BotContext>();

postmeActions.action(PostmeActions.OpenOptions, async (ctx) => {
  await ctx.editMessageText('–ù–∞—Å—Ç—Ä–æ–∏–º —Ä–µ–ø–æ—Å—Ç–µ—Ä ‚öô', {
    reply_markup: {
      inline_keyboard: optionsKeyboard,
    },
  });
});

const GetMoreRegex = new RegExp(`${PostmeActions.GetMore}:(.+)`, 'gi');
postmeActions.action(GetMoreRegex, async (ctx) => {
  await ctx.deleteMessage();

  if (!Number.isNaN(ctx.match[1])) {
    await ctx.deleteMessage(+ctx.match[1]);
  }
  const chatId = ctx.chat?.id;
  const userId = ctx.from?.id;

  if (!chatId || !userId) return;

  await getContent({ chatId, userId });
  await ctx.answerCbQuery();
});

const SelectSourceChatRegex = new RegExp(
  `${PostmeActions.SelectSourceChat}:(.+):(.+)`,
  'gi',
);
postmeActions.action(SelectSourceChatRegex, async (ctx) => {
  try {
    if (!ctx.chat) throw '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç';

    const recourceChatId = ctx.match[1];
    const isProtected = ctx.match[2] === 'true';

    if (isProtected) {
      await ctx.answerCbQuery();
      await ctx.scene.enter(PostmeScene.CheckPassword, {
        recourceChatId,
      });
      return;
    }

    const isSuccess = await setResourceToListening(ctx.chat.id, recourceChatId);

    await ctx.answerCbQuery(
      isSuccess ? '–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω' : '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç',
    );
  } catch (error) {
    console.log(error);
    await ctx.answerCbQuery('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç');
  }
});

const SelectSourceRegex = new RegExp(
  `${PostmeActions.SelectSource}:(.+)`,
  'gi',
);
postmeActions.action(SelectSourceRegex, async (ctx) => {
  try {
    const page = Number.isNaN(ctx.match[1]) ? 0 : +ctx.match[1];

    const activeResources = await getAvailableChats(page);
    await ctx.answerCbQuery();

    if (!activeResources.length) {
      await ctx.editMessageText('ü§ñ–°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—É—Å—Ç!', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
                callback_data: PostmeActions.OpenOptions,
              },
            ],
          ],
        },
      });
      return;
    }
    const paginationButtons = pagination({
      action: PostmeActions.SelectSource,
      pageIndex: page,
      listCount: activeResources.length,
    });

    const listButtons = resourceList(
      activeResources,
      PostmeActions.SelectSourceChat,
    );

    ctx.editMessageText('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:</b>', {
      reply_markup: {
        inline_keyboard: [...listButtons, ...paginationButtons],
      },
      parse_mode: 'HTML',
    });
  } catch (error) {
    console.error(error);
  }
});

postmeActions.action(PostmeActions.SetAsSource, async (ctx) => {
  await ctx.answerCbQuery();

  const isPrivate = ctx.chat?.type === 'private';
  const isPrivateGroup = ctx.chat?.type === 'group';
  const isChannel = ctx.chat?.type === 'channel';

  if (isPrivate) {
    await ctx.editMessageText(
      '–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏—á–Ω—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    );
    return;
  }

  const userborov = await ctx
    .getChatMember(+process.env.SHEN_VISOR!)
    .catch((e) => console.log(e));

  if (
    !userborov ||
    (userborov && ['left', 'kicked'].includes(userborov.status))
  ) {
    await ctx.editMessageText(
      'Userbot –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —á–∞—Ç–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
    );
    return;
  }

  await ctx.answerCbQuery();

  ctx.editMessageText('–í—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞ —Å–≤–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫?', {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å',
            callback_data: `${PostmeActions.SetPassword}:false`,
          },
          {
            text: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
            callback_data: `${PostmeActions.SetPassword}:true`,
          },
        ],
      ],
    },
  });
});

const setPasswordRegex = new RegExp(`${PostmeActions.SetPassword}:(.+)`, 'gi');

postmeActions.action(setPasswordRegex, async (ctx) => {
  const passwordEnable = JSON.parse(ctx.match[1]) as boolean;

  if (passwordEnable) {
    await ctx.scene.enter(PostmeScene.EnterPassword);
    return undefined;
  }

  if (!ctx.chat) {
    await ctx.answerCbQuery('–ù–µ –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫');
    await ctx.deleteMessage();
    return;
  }

  const errorMessage = await addChatAsResource(ctx.chat.id);

  if (errorMessage) {
    await ctx.reply(errorMessage);
    return;
  }
  ctx.reply('–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!');
});

postmeActions.action(PostmeActions.RemoveSource, async (ctx) => {
  const ERR_MESSAGE = '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
  if (!ctx.chat) {
    await ctx.answerCbQuery(ERR_MESSAGE);
    return;
  }

  const isDelete = await deleteSource(ctx.chat.id);

  await ctx.editMessageText(isDelete ? '–†–µ—Å—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' : ERR_MESSAGE);
  await ctx.answerCbQuery();
});

postmeActions.action(PostmeActions.SelectContentType, async (ctx) => {
  if (!ctx.from) {
    await ctx.answerCbQuery();
    return;
  }

  const permissions = await getUserPermissions(ctx.from.id);

  await ctx.answerCbQuery();

  const cbButtons = selectContentButtons(postmePermissions(permissions));

  await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∞—Ç—å', {
    reply_markup: {
      inline_keyboard: cbButtons,
    },
  });
});

const sourceTypeRegex = new RegExp(
  `${PostmeActions.SelectContentType}:(.+)`,
  'gi',
);

postmeActions.action(sourceTypeRegex, async (ctx) => {
  const action = ctx.match[1] as PostmeContent;

  if (!ctx.from || !postmeContents.includes(action)) {
    await ctx.answerCbQuery();
    return;
  }

  const permission = `postme.${action}` as PostmePermissions;

  const newPermissions = await toggleUserPermission(ctx.from.id, permission);

  await ctx.answerCbQuery();

  const cbButtons = selectContentButtons(postmePermissions(newPermissions));

  await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∞—Ç—å', {
    reply_markup: {
      inline_keyboard: cbButtons,
    },
  });
});

function checkBox(checked: boolean) {
  return checked ? '‚úÖ' : '‚¨úÔ∏è';
}

type PostmePermissionsReturned = {
  [P in PostmeContent]: boolean;
};

function postmePermissions(
  permissions: PostmePermissions[],
): PostmePermissionsReturned {
  const result: PostmePermissionsReturned = {
    audio: false,
    photo: false,
    video: false,
    links: false,
    full: false,
  };

  permissions
    .filter((permission) => permission.includes('postme'))
    .map((permission) => permission.split('.')[1] as PostmeContent)
    .forEach((permission) => {
      if (permission in result) result[permission] = true;
    });

  return result;
}

function selectContentButtons(validPermissons: PostmePermissionsReturned) {
  return [
    [
      {
        text: `üñº –§–æ—Ç–æ ${checkBox(validPermissons.photo)}`,
        callback_data: `${PostmeActions.SelectContentType}:photo`,
      },
      {
        text: `üé• –í–∏–¥–µ–æ/GIF ${checkBox(validPermissons.video)}`,
        callback_data: `${PostmeActions.SelectContentType}:video`,
      },
      {
        text: `üîó –°—Å—ã–ª–∫–∏ ${checkBox(validPermissons.links)}`,
        callback_data: `${PostmeActions.SelectContentType}:links`,
      },
    ],
    [
      {
        text: `‚ôæ –õ—é–±–æ–π ${checkBox(validPermissons.full)}`,
        callback_data: `${PostmeActions.SelectContentType}:full`,
      },
      {
        text: `üéµ –ê—É–¥–∏–æ ${checkBox(validPermissons.audio)}`,
        callback_data: `${PostmeActions.SelectContentType}:audio`,
      },
    ],
    [
      {
        text: `üî∞ –í—ã—Ö–æ–¥ üî∞`,
        callback_data: CommonActions.ExitCallback,
      },
    ],
  ];
}
