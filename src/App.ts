import { Telegraf, Context } from 'telegraf';
import * as rateLimit from 'telegraf-ratelimit';
import { Stage } from 'telegraf/typings/scenes';
import session from '@telegraf/session';
import MongoInit from './DB/mongo/mongoInit';
import callbackQuerys from './actions/callbackQuerys';
import tmzEditor from './utils/tmzEditor';
import errorHandler from './utils/errorHandler';
import {
  etiquette,
  weatherApp,
  getArticle,
  delorian,
  respect,
  postme,
  admin,
} from './handlers';
import { addChatMongoListener, getUser } from './DB/mongo/mongoListener';
import { dlMongoListener } from './DB/mongo/delorian';
import scenes from './handlers/scenes';
import './actions/redisEmmiter';

new MongoInit({
  path: process.env.MONGODB_URI,
});

const bot = new Telegraf(process.env.TELETOKEN_DEV!);
const stage = new Stage();

const limitConfig = {
  window: 1000,
  limit: 1,
  onLimitExceeded: (ctx: Context) => {
    if (ctx.callbackQuery) {
      ctx.answerCbQuery('–ù–µ –Ω–∞–¥–æ —Ç–∞–∫ —á–∞—Å—Ç–æ –∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É');
    }
  },
};

bot.use(rateLimit(limitConfig));
bot.use(
  session({
    property: 'session',
    store: new Map(),
    getSessionKey: (ctx) => {
      if (ctx.chat.type === 'channel') {
        return `${ctx.chat.id}`;
      }
      return ctx.from && ctx.chat && `${ctx.from.id}:${ctx.chat.id}`;
    },
    ttl: 1,
  }),
);

// bot.use(stage.middleware());

scenes.forEach((scene) => {
  // —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω—ã
  stage.register(scene);
});

bot.on('message', async (ctx, next) => {
  if (ctx.from.id === +process.env.SHEN_VISOR!) {
    postme.replys(ctx, 'receiving–°ontent');
  }
  return next();
});

bot.use(async (ctx, next) => {
  try {
    const messageChatInfo = await addChatMongoListener(ctx);
    console.log(messageChatInfo);

    const messageUserInfo = await getUser(ctx);

    if (typeof messageUserInfo === 'string') {
      console.log(messageUserInfo);
    }

    const start = Date.now();
    return await next().then(() => {
      console.log(`Response time ${Date.now() - start}ms`);
    });
  } catch (error) {
    console.error(error);
  }
});

bot.on('left_chat_member', etiquette);
bot.on('new_chat_members', etiquette);

bot.hears(/^(—Å|–°)—Ç–∞—Ç—å—è (.+)/, getArticle);
bot.hears(/^(–ø|–ü)–æ–≥–æ–¥–∞ [–∞-—è–ê-–Øa-zA-Z-]+/, weatherApp);

bot.command('delorian', async (ctx) => {
  delorian.replys(ctx);
});

bot.hears(/\/postme (.+)/, async (ctx) => {
  postme.replys(ctx);
});
bot.command('postme', async (ctx) => {
  postme.replys(ctx, 'content');
});

bot.hears(/\/respect (.+)/, respect);
bot.hears(/\/tmz\s(.+)/, tmzEditor);
bot.hears(/\/admin\s(\S+)\s(.+)/, admin);
bot.hears(/^@error/, (ctx) => {
  let message = ctx.message.text.split('=')[1];
  message = JSON.parse(message);
  errorHandler(message, ctx);
});

bot.command('help', (ctx) => {
  ctx.reply(
    `
  –ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ <i>Shen</i>ü§ñ.\n
  –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞ –≤ üó£–≥—Ä—É–ø–ø–µ –∏–ª–∏ üì£–∫–∞–Ω–∞–ª–µ - –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –¥–∞—Ç—å –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã. –¢–∞–∫–æ–≤–∞ –ø–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ <i>Telegram</i>.
  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+3 (–≥. –ú–æ—Å–∫–≤–∞).  –ï—Å–ª–∏ –≤—ã –≤ –¥—Ä—É–≥–æ–º —Ä–µ–≥–∏–æ–Ω–µ —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <code>/tmz +\\-—á–∏—Å–ª–æ</code>. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤–∞–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞.\n
  <b>–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n
  1. <code>/delorian</code> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É–¥—É—â–µ–µ (–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞).\n
  2. <code>/respect</code> <i>—Ç–µ–∫—Å</i> - –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏ –∫ <i>—Ç–µ–∫—Å—Ç—É</i>.\n
  3. <code>–°—Ç–∞—Ç—å—è</code> <i>—Ä–µ—Å—É—Ä—Å</i> - –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–µ–∂–µ–π —Ä–∞–Ω–¥–æ–º–Ω–æ–π —Å—Ç–∞—Ç—å–∏ (–≤–±–µ–π –≤–º–µ—Å—Ç–æ <i>—Ä–µ—Å—É—Ä—Å–∞</i> "—Å–ø–∏—Å–æ–∫" –∏–ª–∏ "list" ‚Äì –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ—á–Ω—è —Ä–µ—Å—É—Ä—Å–æ–≤).\n
  4. <code>/postme</code> - —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤, –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É\\–∫–∞–Ω–∞–ª –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫, —Ç–µ–º —Å–∞–º—ã–º –¥–µ–ª—è—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å –¥—Ä—É–≥–∏–º–∏. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—à–∏ "<code>/postme options</code>". –ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞, —Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–µ ${process.env.NAME_SHEN_VISOR}, –æ–Ω –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç—É –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n
  –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∫ @dezamat .\n
  5. <code>–ü–æ–≥–æ–¥–∞</code> <i>–≥–æ—Ä–æ–¥</i> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ.
  `,
    Telegraf.Extra.HTML(true),
  );
});

bot.command('start', dlMongoListener);
bot.on('callback_query', callbackQuerys);

bot.catch((err) => {
  console.log('Ooops', err);
});

bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
